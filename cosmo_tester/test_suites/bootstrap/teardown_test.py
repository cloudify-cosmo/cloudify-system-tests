from cosmo_tester.framework.examples import get_example_deployment
from cosmo_tester.framework.util import substitute_testing_version

pre_bootstrap_state = None


def test_teardown(function_scoped_manager, ssh_key, logger, test_config):
    _test_teardown(function_scoped_manager, ssh_key, logger, test_config)


def test_mount_teardown(function_scoped_manager, ssh_key, logger,
                        test_config):
    function_scoped_manager.wait_for_ssh()
    mount_path = '/var/lib/rabbitmq'
    function_scoped_manager.run_command(f'rm -rf {mount_path}', use_sudo=True)
    function_scoped_manager.run_command(f'mkdir {mount_path}', use_sudo=True)
    function_scoped_manager.run_command(
            f'mount -t tmpfs -o size=100M tmpfs {mount_path}', use_sudo=True)
    try:
        _test_teardown(function_scoped_manager, ssh_key, logger, test_config)
    finally:
        function_scoped_manager.run_command(f'umount {mount_path} || true',
                                            use_sudo=True)
        function_scoped_manager.run_command(f'rm -rf {mount_path} || true',
                                            use_sudo=True)


def _test_teardown(function_scoped_manager, ssh_key, logger, test_config):
    function_scoped_manager.wait_for_ssh()

    check_pre_bootstrap_state(function_scoped_manager)
    function_scoped_manager.bootstrap(blocking=True, include_sanity=True)

    expected_diffs = {}

    example = get_example_deployment(function_scoped_manager,
                                     ssh_key, logger, 'teardown',
                                     test_config)
    example.upload_and_verify_install()
    example.uninstall()

    # When the example deployment installs the agent this group will exist.
    # It shouldn't be deleted afterwards in case files on the system are in
    # that group.
    expected_diffs['os groups'] = {'cfyagent'}

    function_scoped_manager.teardown(kill_certs=False)

    # The agents dir should be empty, so let's remove it.
    function_scoped_manager.run_command(
        'rmdir /opt/cloudify-agent-{}'.format(
            test_config['testing_version'].replace('-ga', '')
        ),
        use_sudo=True,
    )

    current_state = _get_system_state(function_scoped_manager)
    diffs = {}

    for key in current_state:
        pre_bootstrap_set = set(pre_bootstrap_state[key])
        current_set = set(current_state[key])

        diff = current_set - pre_bootstrap_set
        if diff:
            diffs[key] = diff

    assert diffs == expected_diffs


def check_pre_bootstrap_state(manager):
    global pre_bootstrap_state
    pre_bootstrap_state = _get_system_state(manager)

    # Some manual additions, as we know these files will be generated by the BS
    pre_bootstrap_state['yum packages'] += [
        'python-pip', 'libxslt', 'daemonize'
    ]
    pre_bootstrap_state['folders in /opt'] += [
        'python_NOTICE.txt',
        'lib',
        'cloudify-manager-install',
        substitute_testing_version(
            'cloudify-agent-{testing_version}',
            manager._test_config['testing_version'],
        )
    ]
    pre_bootstrap_state['init_d service files (/etc/rc.d/init.d/)'] += [
        'jexec'
    ]


def _get_system_state(mgr):
    systemd = mgr.run_command('ls /usr/lib/systemd/system').stdout.split()
    init_d = mgr.run_command('ls /etc/rc.d/init.d/').stdout.split()
    sysconfig = mgr.run_command('ls /etc/sysconfig').stdout.split()
    opt_dirs = mgr.run_command('ls /opt').stdout.split()
    etc_dirs = mgr.run_command('ls /etc').stdout.split()

    profile_check_command = (
        'test -x ~{user}/.cloudify/profiles/manager-local '
        '&& echo "Profile exists" '
        '|| echo "Profile missing"'
    )
    cfy_user_profile_state = mgr.run_command(
        profile_check_command.format(user=mgr.username)).stdout.strip()
    cfy_root_profile_state = mgr.run_command(
        profile_check_command.format(user='root')).stdout.strip()

    packages = mgr.run_command('rpm -qa').stdout.split()
    # Prettify the packages output
    packages = [package.rsplit('-', 2)[0] for package in packages]

    users = mgr.run_command('cut -d: -f1 /etc/passwd').stdout.split()
    groups = mgr.run_command('cut -d: -f1 /etc/group').stdout.split()
    return {
        'systemd service files (/usr/lib/systemd/system)': systemd,
        'init_d service files (/etc/rc.d/init.d/)': init_d,
        'service config files (/etc/sysconfig)': sysconfig,
        'folders in /opt': opt_dirs,
        'folders in /etc': etc_dirs,
        'yum packages': packages,
        'os users': users,
        'os groups': groups,
        'cfy user profile state': cfy_user_profile_state,
        'cfy root profile state': cfy_root_profile_state,
    }
