tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/5.0.0.dev1/types.yaml
  - plugin:cloudify-openstack-plugin

plugins:
  mock:
    source: mock-plugin
    executor: host_agent

inputs:
  image:
    description: >
      Image to be used when launching agent VM's
  flavor:
    description: >
      Flavor of the agent VM's
  user:
    description: >
      User to use during remote connection to VM.
  network_name:
    description: >
      The OpenStack network the VM will be attached to.
  private_key_path:
    description: >
      The private key path on the manager for connecting to the VM.
  keypair_name:
    description: >
      The OpenStack keypair name to associate with the VM.
  install_method:
    type: string
  service_user:
    type: string
  service_password:
    type: string

dsl_definitions:
  - &service_info
    service_user: { get_input: service_user }
    service_password: { get_input: service_password }

node_templates:
  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      rules:
        - port: 5985
          remote_ip_prefix: 0.0.0.0/0
    interfaces:
      cloudify.interfaces.validation: {}

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: true
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: private_key_path }
    interfaces:
      cloudify.interfaces.validation: {}

  userdata_initializer:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: mock.mock_plugin.tasks.prepare_userdata
          executor: central_deployment_agent
          inputs:
            <<: *service_info
            install_method: { get_input: install_method }

  host:
    type: cloudify.openstack.nodes.WindowsServer
    properties:
      image: { get_input: image }
      flavor: { get_input: flavor }
      agent_config:
        install_method: { get_input: install_method }
        user: { get_input: user }
        key: { get_input: private_key_path }
        process_management: *service_info
      management_network_name: { get_input: network_name }
      server:
        userdata: { get_attribute: [ userdata_initializer, userdata] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [ security_group, external_name ]}]
        start:
          inputs:
            max_retries: 50
      cloudify.interfaces.validation: {}
    relationships:
      - type: cloudify.relationships.depends_on
        target: userdata_initializer
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_security_group
        target: security_group

  test_app:
    type: cloudify.nodes.Root
    interfaces:
      test.interface:
        test:
          implementation: mock.mock_plugin.tasks.test_app
          inputs: *service_info
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
