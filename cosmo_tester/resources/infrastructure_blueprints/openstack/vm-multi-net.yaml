tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/5.0.5/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:
  floating_network_id: {}
  image: {}
  flavor: {}
  test_infrastructure_name: {}
  userdata:
    default: ""

dsl_definitions:
  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    project_domain_name: default
    user_domain_name: default
    tenant_name: { get_secret: keystone_tenant }
    auth_url: { get_secret: keystone_url }
    region_name: { get_secret: keystone_region }

node_templates:
  test_host:
    type: cloudify.nodes.openstack.Server
    instances:
      deploy: 1
    properties:
      agent_config:
        install_method: none
      resource_config:
        image_id: { get_input: image }
        flavor_id: { get_input: flavor }
        user_data: { get_input: userdata }
      client_config: *openstack_config
    relationships:
      - type: cloudify.relationships.openstack.server_connected_to_security_group
        target: test_security_group
      - type: cloudify.relationships.openstack.server_connected_to_port
        target: test_port
      - type: cloudify.relationships.openstack.server_connected_to_port
        target: test_port_2
      - type: cloudify.relationships.openstack.server_connected_to_port
        target: test_port_3
      - type: cloudify.relationships.openstack.server_connected_to_keypair
        target: test_keypair

  test_port:
    type: cloudify.nodes.openstack.Port
    instances:
      deploy: 1
    properties:
      client_config: *openstack_config
      resource_config:
        network_id: { get_attribute: [ test_network, id ] }
    relationships:
      - target: test_subnet
        type: cloudify.relationships.connected_to
      - target: test_security_group
        type: cloudify.relationships.connected_to
      - target: test_floating_ip
        type: cloudify.relationships.openstack.port_connected_to_floating_ip

  test_port_2:
    type: cloudify.nodes.openstack.Port
    instances:
      deploy: 1
    properties:
      client_config: *openstack_config
      resource_config:
        network_id: { get_attribute: [ test_network_2, id ] }
    relationships:
      - target: test_subnet_2
        type: cloudify.relationships.connected_to
      - target: test_security_group
        type: cloudify.relationships.connected_to

  test_port_3:
    type: cloudify.nodes.openstack.Port
    instances:
      deploy: 1
    properties:
      client_config: *openstack_config
      resource_config:
        network_id: { get_attribute: [ test_network_3, id ] }
    relationships:
      - target: test_subnet_3
        type: cloudify.relationships.connected_to
      - target: test_security_group
        type: cloudify.relationships.connected_to

  test_floating_ip:
    type: cloudify.nodes.openstack.FloatingIP
    instances:
      deploy: 1
    properties:
      client_config: *openstack_config
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  test_keypair:
    type: cloudify.nodes.openstack.KeyPair
    properties:
      use_external_resource: true
      resource_config:
        name: { get_input: test_infrastructure_name }
      client_config: *openstack_config

  test_network:
    type: cloudify.nodes.openstack.Network
    properties:
      use_external_resource: true
      resource_config:
        name: { concat: [ { get_input: test_infrastructure_name }, "-1" ] }
      client_config: *openstack_config

  test_network_2:
    type: cloudify.nodes.openstack.Network
    properties:
      use_external_resource: true
      resource_config:
        name: { concat: [ { get_input: test_infrastructure_name }, "-2" ] }
      client_config: *openstack_config

  test_network_3:
    type: cloudify.nodes.openstack.Network
    properties:
      use_external_resource: true
      resource_config:
        name: { concat: [ { get_input: test_infrastructure_name }, "-3" ] }
      client_config: *openstack_config

  test_subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      use_external_resource: true
      resource_config:
        name: { concat: [ { get_input: test_infrastructure_name }, "-1" ] }
      client_config: *openstack_config

  test_subnet_2:
    type: cloudify.nodes.openstack.Subnet
    properties:
      use_external_resource: true
      resource_config:
        name: { concat: [ { get_input: test_infrastructure_name }, "-2" ] }
      client_config: *openstack_config

  test_subnet_3:
    type: cloudify.nodes.openstack.Subnet
    properties:
      use_external_resource: true
      resource_config:
        name: { concat: [ { get_input: test_infrastructure_name }, "-3" ] }
      client_config: *openstack_config

  external_network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_input: floating_network_id }
        kwargs:
          routing:
            external: true

  test_security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      use_external_resource: true
      resource_config:
        name: { get_input: test_infrastructure_name }
      client_config: *openstack_config

groups:
  vmgroup:
    members: [test_host, test_floating_ip, test_port, test_port_2, test_port_3]

policies:
 scale:
   type: cloudify.policies.scaling
   properties:
     default_instances: 1
   targets: [vmgroup]
