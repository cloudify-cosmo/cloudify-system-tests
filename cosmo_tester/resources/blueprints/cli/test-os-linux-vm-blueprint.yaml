
tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/5.2.7.dev1/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:
  prefix:
    description: >
      Unique test id to be added as a prefix for resource names.
  external_network:
    type: string
  os_username:
    type: string
  os_password:
    type: string
  os_tenant_name:
    type: string
  os_auth_url:
    type: string
  os_region:
    type: string
  flavor:
    type: string
  image_name:
    type: string
  key_pair_path:
    type: string

node_templates:
  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network }
      openstack_config: &OPENSTACK_CONFIG
        username: { get_input: os_username }
        password: { get_input: os_password }
        tenant_name: { get_input: os_tenant_name }
        auth_url: { get_input: os_auth_url }
        region: { get_input: os_region }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-router'] }
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to
    interfaces:
      cloudify.interfaces.validation: {}

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-network'] }
      openstack_config: *OPENSTACK_CONFIG
    interfaces:
      cloudify.interfaces.validation: {}

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-subnet'] }
      subnet:
        ip_version: 4
        cidr: 10.67.79.0/24
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - target: network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router
    interfaces:
      cloudify.interfaces.validation: {}

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_property: [external_network, resource_id] }
      openstack_config: *OPENSTACK_CONFIG
    interfaces:
      cloudify.interfaces.validation: {}

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-security-group'] }
      security_group:
        description: Basic cli VM
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
      openstack_config: *OPENSTACK_CONFIG
    interfaces:
      cloudify.interfaces.validation: {}

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-keypair'] }
      private_key_path: { get_input: key_pair_path }
      openstack_config: *OPENSTACK_CONFIG
    interfaces:
      cloudify.interfaces.validation: {}

  server:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      image: { get_input: image_name }
      flavor: { get_input: flavor }
      management_network_name: { get_property: [network, resource_id] }
      openstack_config: *OPENSTACK_CONFIG
    interfaces:
      cloudify.interfaces.validation: {}
    relationships:
      - target: floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: network
        type: cloudify.relationships.connected_to
      - target: subnet
        type: cloudify.relationships.depends_on
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group

outputs:
  vm_public_ip_address:
    value: { get_attribute: [floating_ip, floating_ip_address] }
  vm_private_ip_address:
    value: { get_attribute: [server, ip]}
