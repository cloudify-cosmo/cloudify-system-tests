tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3.1/plugin.yaml

inputs:
  prefix:
    description: >
      Unique test id to be added as a prefix for resource names.
  external_network:
    type: string
  os_username:
    type: string
  os_password:
    type: string
  os_tenant_name:
    type: string
  os_auth_url:
    type: string
  os_region:
    type: string
  flavor:
    type: string
  image_id:
    type: string
  ssh_username:
    default: centos
    type: string
  key_pair_path:
    type: string
  broker_ssl_public_cert:
    type: string
    default: ''
  broker_ssl_private_cert:
    type: string
    default: ''


node_types:
  external_rabbitmq:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      broker_ssl_public_cert:
        default: { get_input: broker_ssl_public_cert }
      broker_ssl_private_cert:
        default: { get_input: broker_ssl_private_cert }

node_templates:
  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network }
      openstack_config: &OPENSTACK_CONFIG
        username: { get_input: os_username }
        password: { get_input: os_password }
        tenant_name: { get_input: os_tenant_name }
        auth_url: { get_input: os_auth_url }
        region: { get_input: os_region }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-simple-vm-router'] }
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-simple-vm-network'] }
      openstack_config: *OPENSTACK_CONFIG

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-simple-vm-subnet'] }
      subnet:
        ip_version: 4
        cidr: 10.67.79.0/24
        dns_nameservers: [8.8.4.4, 8.8.8.8]
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - target: network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_property: [external_network, resource_id] }
      openstack_config: *OPENSTACK_CONFIG

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-simple-vm-security-group'] }
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
        - port: 5671
          remote_ip_prefix: 0.0.0.0/0
        - port: 5672
          remote_ip_prefix: 0.0.0.0/0
        - port: 8086
          remote_ip_prefix: 0.0.0.0/0
        - port: 9200
          remote_ip_prefix: 0.0.0.0/0
      openstack_config: *OPENSTACK_CONFIG

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-simple-vm-keypair'] }
      private_key_path: { get_input: key_pair_path }
      openstack_config: *OPENSTACK_CONFIG

  external_components_server:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      image: { get_input: image_id }
      flavor: { get_input: flavor }
      # If the server name is >63 characters, rabbitmqctl will be unhappy
      resource_id: { concat: [{ get_input: prefix}, '-server'] }
      management_network_name: { get_property: [network, resource_id] }
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - target: floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: network
        type: cloudify.relationships.connected_to
      - target: subnet
        type: cloudify.relationships.depends_on
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: security_group
        type: cloudify.openstack.server_connected_to_security_group

  external_elasticsearch_app:
    type: cloudify.nodes.ApplicationModule
    relationships:
      - target: external_components_server
        type: cloudify.relationships.contained_in
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install-elasticsearch.sh
            fabric_env: &fabric_env
              user: { get_input: ssh_username }
              key_filename: { get_input: key_pair_path }
              host_string: { get_attribute: [floating_ip, floating_ip_address] }
              always_use_pty: true
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start-elasticsearch.sh
            fabric_env: *fabric_env


  external_influxdb_app:
    type: cloudify.nodes.ApplicationModule
    relationships:
      - target: external_components_server
        type: cloudify.relationships.contained_in
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install-influxdb.sh
            fabric_env: *fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start-influxdb.sh
            fabric_env: *fabric_env


  external_rabbitmq_app:
    type: external_rabbitmq
    relationships:
      - target: external_components_server
        type: cloudify.relationships.contained_in
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/install-rabbitmq.sh
            fabric_env: *fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/start-rabbitmq.sh
            fabric_env: *fabric_env

outputs:
  external_components_vm_public_ip_address:
    value: { get_attribute: [floating_ip, floating_ip_address] }
  external_components_vm_private_ip_address:
    value: { get_attribute: [external_components_server, ip]}
