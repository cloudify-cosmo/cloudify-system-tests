tosca_definitions_version: cloudify_dsl_1_0

imports:
    - http://www.getcloudify.org/spec/cloudify/3.3m4/types.yaml
    - http://www.getcloudify.org/spec/openstack-plugin/1.3m4/plugin.yaml
    - http://www.getcloudify.org/spec/diamond-plugin/1.3m4/plugin.yaml
    - policies/diamond_test.yaml

inputs:
    image: {}
    flavor: {}
    diamond_config:
        default:
            interval: 1

    collectors_config:
        default:
            ExampleCollector: {}
            CPUCollector: {}
            MemoryCollector: {}
            LoadAverageCollector: {}
            DiskUsageCollector: {}

outputs:
    service:
        value: { get_attribute: [vm, service] }
    metric:
        value: { get_attribute: [vm, metric] }

node_templates:
    vm:
        type: cloudify.openstack.nodes.Server
        properties:
            image: { get_input: image }
            flavor: { get_input: flavor }
            server:
                name: diamond-agent-server
        interfaces:
            cloudify.interfaces.monitoring_agent:
                install:
                    implementation: diamond.diamond_agent.tasks.install
                    inputs:
                        diamond_config: { get_input: diamond_config }
                start: diamond.diamond_agent.tasks.start
                stop: diamond.diamond_agent.tasks.stop
                uninstall: diamond.diamond_agent.tasks.uninstall
            cloudify.interfaces.monitoring:
                start:
                    implementation: diamond.diamond_agent.tasks.add_collectors
                    inputs:
                        collectors_config: { get_input: collectors_config }
            test:
                op: scripts/mock_operation.py

workflows:
    on_monitor_event:
        mapping: scripts/from_on_monitor_event.py
        parameters:
            service: {}
            metric: {}

groups:
    vms:
        members: [vm]
        policies:
            test_policy:
                type: diamond_test
                properties:
                    contains: example
                triggers:
                    test_trigger:
                        type: cloudify.policies.triggers.execute_workflow
                        parameters:
                            workflow: on_monitor_event
                            force: true
                            workflow_parameters:
                                service: { get_property: [SELF, service] }
                                metric: { get_property: [SELF, metric] }
